/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/events.ts":
/*!***********************!*\
  !*** ./src/events.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"events\": () => (/* binding */ events)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ \"./src/utils.ts\");\n\nconst events = [\n    {\n        id: 'firstEvent',\n        title: 'Windfall Gains',\n        text: `<p>You have just completed a run with the merchant ship you've worked on for five years.` +\n            `This run was phenomenally succesful, and your captain has decided to ` +\n            `retire while she's ahead.</p>` +\n            `<p>You are now without a job and in a space station far from your home. To ease the sting ` +\n            `of her crew's unexpected unemployment, every crewmember has been given a large sum of money, ` +\n            `the \"extra's\" from the windfall earned on the last run. You know exactly what to do with ` +\n            `your earnings: become captain of your own vessel and seek your own fortune in the depths of ` +\n            `space.</p>` +\n            `<p>In this small port, your options are limited. Which ship will you choose?</p>`,\n        choices: [\n            {\n                next: 'worstShip',\n                cost: 40000,\n                getText: function (playerState) {\n                    return 'The grimy, cheap looking one. You\\'ll spend the rest of your money on your crew and supplies. Costs ' + this.cost + ' coins.';\n                },\n                isActionValid: function (playerState) {\n                    return playerState.coins >= this.cost;\n                },\n                performAction: function (playerState) {\n                    playerState.coins -= this.cost;\n                    playerState.ship = 'worst';\n                }\n            },\n            {\n                next: 'bestShip',\n                cost: 90000,\n                getText: function (playerState) {\n                    return 'The shiny, expensive one. With an AI like that, who needs a crew?! Costs ' + this.cost + ' coins.';\n                },\n                isActionValid: function (playerState) {\n                    return playerState.coins >= this.cost;\n                },\n                performAction: function (playerState) {\n                    playerState.coins -= this.cost;\n                    playerState.ship = 'best';\n                    playerState.crew.push({\n                        name: 'Ship AI',\n                        salary: 2000,\n                        savings: 0,\n                        jobTitle: 'ai',\n                        bonus: {\n                            holdMax: 2,\n                            speed: 2,\n                            health: 2,\n                        }\n                    });\n                    playerState.updateUI = true;\n                }\n            }\n        ]\n    },\n    {\n        id: 'worstShip',\n        title: 'The Worst Ship',\n        getText: function (playerState) {\n            return '<p>You picked the rough and tumble ship and managed to pay very little for it. The seller had a relieved look in their eyes as they passed all of the access and ownership documents to you. Now you need to find someone to help you run the thing.</p><p>Having worked on a ship for five years full time, and lived around them for your formative years before that, you are a fair jack-of-all-trades on board. But a good navigator and an experienced mechanic can make the difference between life and death in the vastness between stars.</p><p>First, a navigator. Two likely candidates come to mind. You saw the names of their current ships in port as you docked. They are both junior members of their current crews, and might be interested in becoming the senior navigator on your ship. Who do you ask?</p>';\n        },\n        choices: [\n            {\n                next: 'crewHired',\n                getText: function (playerState) {\n                    return 'Time to think about hiring a crew.';\n                },\n            }\n        ]\n    },\n    {\n        id: 'bestShip',\n        title: 'The Best Ship',\n        text: `<p>You manage to bargain the sale price down from impossibly high ` +\n            `to uncomfortably high. You will be eating light until you earn some ` +\n            `money. After one more exhaustive once-over of the ship, -- your ` +\n            `ship, now! -- you plot a course through the next several way points ` +\n            `toward your home planet and examine the markets to find cargo to ` +\n            `haul.</p>`,\n        choices: [\n            {\n                next: 'marketExcelsior',\n                text: 'Check the markets and buy goods and supplies.',\n            }\n        ]\n    },\n    {\n        id: 'crewHired',\n        cost: 5000,\n        title: 'Your crew so far',\n        getText: function (playerState) {\n            var _a, _b, _c, _d;\n            let textBase = `<p>Several ships are in port whose junior officers you have seen or heard of over your years in this business. What sort of skillset are you most interested in acquiring now?</p><p>So far, you have hired: </p><ul>`;\n            if (!playerState.crew.find(obj => obj.jobTitle === 'doctor') &&\n                !playerState.crew.find(obj => obj.jobTitle === 'cargoMaster') &&\n                !playerState.crew.find(obj => obj.jobTitle === 'navigator') &&\n                !playerState.crew.find(obj => obj.jobTitle === 'ai')) {\n                textBase += '<li>No one! Careful, you\\'re not terribly effective all by yourself right now.</li>';\n            }\n            if (playerState.crew.find(obj => obj.jobTitle === 'navigator')) {\n                textBase += '<li>A navigator named ' + ((_a = playerState.crew.find(obj => obj.jobTitle === 'navigator')) === null || _a === void 0 ? void 0 : _a.name) + ', helpful in speeding your ship on its way.</li>';\n            }\n            if (playerState.crew.find(obj => obj.jobTitle === 'cargoMaster')) {\n                textBase += '<li>A cargo master named ' + ((_b = playerState.crew.find(obj => obj.jobTitle === 'cargoMaster')) === null || _b === void 0 ? void 0 : _b.name) + ', helpful at cramming more goods in less space.</li>';\n            }\n            if (playerState.crew.find(obj => obj.jobTitle === 'doctor')) {\n                textBase += '<li>A doctor named ' + ((_c = playerState.crew.find(obj => obj.jobTitle === 'doctor')) === null || _c === void 0 ? void 0 : _c.name) + ', helpful at keeping you and your crew healthy through the dangers of space travel.</li>';\n            }\n            if (playerState.crew.find(obj => obj.jobTitle === 'ai')) {\n                textBase += '<li>An AI named ' + ((_d = playerState.crew.find(obj => obj.jobTitle === 'ai')) === null || _d === void 0 ? void 0 : _d.name) + ' who is a jack of all trades.</li>';\n            }\n            textBase += '</ul>';\n            return textBase;\n        },\n        choices: [\n            {\n                next: 'hireCargoMaster',\n                getText: function (playerState) {\n                    const text = 'You have heard of two promising cargo master\\'s currently docked in Excelsior Station. Ask around to see if anyone would be interested in joining your crew.';\n                    return text;\n                },\n                isActionValid: function (playerState) {\n                    return !playerState.crew.find(obj => obj.jobTitle === 'cargoMaster');\n                }\n            },\n            {\n                next: 'hireDoctor',\n                getText: function (playerState) {\n                    const text = 'There is one doctor in the station who might be willing to join you. He has a reputation for botched operations and poisonings, but some people swear by his dietary advice. You send him a note asking him to join you, full of unspoken reservations.';\n                    return text;\n                },\n                isActionValid: function (playerState) {\n                    return !playerState.crew.find(obj => obj.jobTitle === 'doctor');\n                }\n            },\n            {\n                next: 'hireNavigator',\n                getText: function (playerState) {\n                    const text = 'Two likely candidates for navigator come to mind. You saw the names of their current ships in port as you docked. They are both junior members of their current crews, and might be interested in becoming the senior navigator on your ship.';\n                    return text;\n                },\n                isActionValid: function (playerState) {\n                    return !playerState.crew.find(obj => obj.jobTitle === 'navigator');\n                }\n            },\n            {\n                next: 'marketExcelsior',\n                text: 'Your crew looks good. Time to buy trade goods!',\n            }\n        ]\n    },\n    { id: 'hireNavigator',\n        title: 'Hiring a Navigator',\n        cost: 10000,\n        getText: function (playerState) {\n            return '<p>You have two choices for navigator. The first is Dorothy.</p><p>Dorothy is an older, grizzled veteran of many journeys. She has always worked in the shadow of her superiors and has a sour attitude about it. But her captain swears that she can pilot a brick through an emergency planet landing, and looking at your new ship, that might be a useful skill to have.</p><p>Your other option is Eugene. Eugene is a young upstart, only in space for two years and already the subject of drunken praise in a dozen stations. He is impatient for glory, but charming, affable, and very clever.</p>';\n        },\n        choices: [\n            {\n                next: 'grouchyNavigator',\n                text: 'Ask Dorothy to join you.'\n            },\n            {\n                next: 'ambitiousNavigator',\n                text: 'Offer a position to Eugene.'\n            },\n            {\n                next: 'crewHired',\n                text: 'Decide to spend your money on a different crewmember.'\n            }\n        ] },\n    { id: 'grouchyNavigator',\n        title: 'An Experienced Navigator',\n        cost: 10000,\n        getText: function (playerState) {\n            return '<p>Dorothy calls you shortly after recieving your note offering her a job.</p><p>\"Sure, I\\'ll join your crew. It\\'ll cost you though kid. To start, pay me \"' + this.cost + ' coins. Every port, I\\'ll need another ' + (this.cost) / 10 + ' coins.</p>';\n        },\n        choices: [\n            {\n                cost: 10000,\n                next: 'crewHired',\n                getText: function (playerState) {\n                    return 'Hire them!';\n                },\n                isActionValid: function (playerState) {\n                    return playerState.coins >= (this.cost) + (this.cost / 10);\n                },\n                performAction: function (playerState) {\n                    playerState.coins -= this.cost;\n                    const person = {\n                        name: 'Dorothy',\n                        jobTitle: 'navigator',\n                        salary: this.cost / 10,\n                        savings: this.cost * 2,\n                        bonus: {\n                            holdMax: 0,\n                            speed: 7,\n                            health: 0,\n                        }\n                    };\n                    playerState.crew.push(person);\n                }\n            },\n            {\n                next: 'ambitiousNavigator',\n                text: 'Turn her down, try asking the ambitious, young Eugene instead.'\n            },\n            {\n                next: 'crewHired',\n                text: 'Decide to spend your money on a different crew position, or none at all.'\n            }\n        ]\n    },\n    { id: 'ambitiousNavigator',\n        title: 'An Ambitious Young Navigator',\n        cost: 5000,\n        getText: function (playerState) {\n            return '<p>You send a note offering a position to Eugene.</p><p>He sends a message back. It reads in part, \"Finally, someone is willing to get me off my boat! I\\'ll make you a good deal. Just \"' + this.cost + ' coins to start, and at every port, I\\'ll need another ' + (this.cost) / 10 + ' coins. You won\\'t regret this, I promise!\"</p>';\n        },\n        choices: [\n            {\n                cost: 5000,\n                next: 'crewHired',\n                getText: function (playerState) {\n                    return 'Hire them!';\n                },\n                isActionValid: function (playerState) {\n                    return playerState.coins >= (this.cost) + (this.cost / 10);\n                },\n                performAction: function (playerState) {\n                    playerState.coins -= this.cost;\n                    const person = {\n                        name: 'Eugene',\n                        jobTitle: 'navigator',\n                        salary: this.cost / 10,\n                        savings: this.cost * 2,\n                        bonus: {\n                            holdMax: 0,\n                            speed: 5,\n                            health: 0,\n                        }\n                    };\n                    playerState.crew.push(person);\n                }\n            },\n            {\n                next: 'grouchyNavigator',\n                text: 'Turn him down, try asking the experienced, older Dorothy instead.'\n            },\n            {\n                next: 'crewHired',\n                text: 'Decide to spend your money on a different crew position, or none at all.'\n            }\n        ]\n    },\n    { id: 'hireCargoMaster',\n        title: 'Hiring a Navigator',\n        getText: function (playerState) {\n            return '<p>You have two choices for navigator. The first is Alice.</p><p>Alice has long blond hair and falls into holes more often than anyone expects. She has a history of awkward relationships with much older men. She is a terrible cargo master.</p><p>Your other option is Addams. Addams loves dark, cavernous spaces and styling them with creepy elegance. He is a decent cargo master.</p>';\n        },\n        choices: [\n            {\n                next: 'badCargoMaster',\n                text: 'Ask Alice to join you.'\n            },\n            {\n                next: 'goodCargoMaster',\n                text: 'Offer a position to Adamm.'\n            },\n            {\n                next: 'crewHired',\n                text: 'Decide to spend your money on a different crewmember.'\n            }\n        ] },\n    { id: 'badCargoMaster',\n        title: 'A Falling Cargo Master',\n        cost: 3000,\n        getText: function (playerState) {\n            return '<p>Alice answers your video call, her left temple bruised. Probably from a recent fall.</p><p>She smiles cheerfully and says, \"Your ship must have fewer holes than this one! I\\'d be happy to join you! It\\'ll cost me \"' + this.cost + ' coins to move into my new berth on your boat. Every port, I\\'ll need another ' + (this.cost) / 10 + ' coins.</p>';\n        },\n        choices: [\n            {\n                cost: 3000,\n                next: 'crewHired',\n                getText: function (playerState) {\n                    return 'Hire them!';\n                },\n                isActionValid: function (playerState) {\n                    return playerState.coins >= (this.cost) + (this.cost / 10);\n                },\n                performAction: function (playerState) {\n                    playerState.coins -= this.cost;\n                    const person = {\n                        name: 'Alice',\n                        jobTitle: 'cargoMaster',\n                        salary: this.cost / 10,\n                        savings: this.cost * 2,\n                        bonus: {\n                            holdMax: 3,\n                            speed: 0,\n                            health: 0,\n                        }\n                    };\n                    playerState.crew.push(person);\n                }\n            },\n            {\n                next: 'goodCargoMaster',\n                text: 'Turn her down, try asking the brooding, capable Addams instead.'\n            },\n            {\n                next: 'crewHired',\n                text: 'Decide to spend your money on a different crew position, or none at all.'\n            }\n        ]\n    },\n    { id: 'goodCargoMaster',\n        title: 'A Creepy Cargo Master',\n        cost: 12000,\n        getText: function (playerState) {\n            return '<p>You send a note offering a position to Addams.</p><p>He sends a message back. It reads in part, \"Your ship is small, and therefore ugly. But it has character. For \"' + this.cost + ' coins to start I\\'ll join you, and at every port, I\\'ll need another ' + (this.cost) / 10 + ' coins.\"</p>';\n        },\n        choices: [\n            {\n                cost: 12000,\n                next: 'crewHired',\n                getText: function (playerState) {\n                    return 'Hire them!';\n                },\n                isActionValid: function (playerState) {\n                    return playerState.coins >= (this.cost) + (this.cost / 10);\n                },\n                performAction: function (playerState) {\n                    playerState.coins -= this.cost;\n                    const person = {\n                        name: 'Addams',\n                        jobTitle: 'navigator',\n                        salary: this.cost / 10,\n                        savings: this.cost * 2,\n                        bonus: {\n                            holdMax: 10,\n                            speed: 0,\n                            health: 0,\n                        }\n                    };\n                    playerState.crew.push(person);\n                }\n            },\n            {\n                next: 'badCargoMaster',\n                text: 'Turn him down, try asking the clumsy Alice instead.'\n            },\n            {\n                next: 'crewHired',\n                text: 'Decide to spend your money on a different crew position, or none at all.'\n            }\n        ]\n    },\n    { id: 'hireDoctor',\n        title: 'A Venomous Doctor',\n        cost: 700,\n        getText: function (playerState) {\n            return '<p>The doctor, an older man named Daoud, sends a note in response to your invitation. \"Of course I\\'ll join your crew, dear! My pharamceutical skills are unappreciated here. It\\'ll only cost you \"' + this.cost + ' coins to hire me away from my current ship. Every port, I\\'ll need another ' + (this.cost) * 10 + ' coins.\"</p>';\n        },\n        choices: [\n            {\n                cost: 700,\n                next: 'crewHired',\n                getText: function (playerState) {\n                    return 'Hire them!';\n                },\n                isActionValid: function (playerState) {\n                    return playerState.coins >= (this.cost) + (this.cost * 10);\n                },\n                performAction: function (playerState) {\n                    playerState.coins -= this.cost;\n                    const person = {\n                        name: 'Deirdre',\n                        jobTitle: 'doctor',\n                        salary: this.cost / 10,\n                        savings: this.cost * 2,\n                        bonus: {\n                            holdMax: 0,\n                            speed: 0,\n                            health: 7,\n                        }\n                    };\n                    playerState.crew.push(person);\n                }\n            },\n            {\n                next: 'crewHired',\n                text: 'Decide to spend your money on a different crew position, or none at all.'\n            }\n        ]\n    },\n    { id: 'marketExcelsior',\n        title: 'To market, to market...',\n        getText: function (playerState) {\n            const text1 = 'You scroll through the market listings, looking at what is best to buy and sell here. You have a little money left to buy some goods to ship and some supplies to keep yourself and your ship functioning on your journey.';\n            const text2 = 'The listings are kept in the \"Map\" section of your display.';\n            return `<p>${text1}</p><p>${text2}</p>`;\n        },\n        choices: [\n            {\n                next: 'marketExcelsior',\n                cost: 15,\n                getText: function (playerState) {\n                    return 'Buy \"High Density Foodstuffs\" at ' + this.cost + ' coins per unit. (Currently own ' + playerState.cargo.tradeFood + ' units.)';\n                },\n                isActionValid: function (p) {\n                    const hasEnoughMoney = () => p.coins >= this.cost;\n                    const hasEnoughCargoSpace = () => (0,_utils__WEBPACK_IMPORTED_MODULE_0__.calculateCargo)(p) < p.cargo.holdMax;\n                    return (hasEnoughMoney() && hasEnoughCargoSpace());\n                },\n                performAction: function (playerState) {\n                    playerState.coins -= this.cost;\n                    playerState.cargo.tradeFood += 1;\n                }\n            },\n            {\n                next: 'marketExcelsior',\n                cost: 15,\n                getText: function (playerState) {\n                    return 'Sell \"High Density Foodstuffs\" at ' + this.cost + ' coins per unit. (Currently own ' + playerState.cargo.tradeFood + ' units.)';\n                },\n                isActionValid: function (playerState) {\n                    return playerState.cargo.tradeFood > 0;\n                },\n                performAction: function (playerState) {\n                    playerState.coins += this.cost;\n                    playerState.cargo.tradeFood -= 1;\n                }\n            },\n            {\n                next: 'marketExcelsior',\n                cost: 24,\n                getText: function (playerState) {\n                    return 'Buy \"Medicine\" at ' + this.cost + ' coins per unit. (Currently own ' + playerState.cargo.tradeMedicine + ' units.)';\n                },\n                isActionValid: function (p) {\n                    const hasEnoughMoney = () => p.coins >= this.cost;\n                    const hasEnoughCargoSpace = () => (0,_utils__WEBPACK_IMPORTED_MODULE_0__.calculateCargo)(p) < p.cargo.holdMax;\n                    return (hasEnoughMoney() && hasEnoughCargoSpace());\n                },\n                performAction: function (playerState) {\n                    playerState.coins -= this.cost;\n                    playerState.cargo.tradeMedicine += 1;\n                }\n            },\n            {\n                next: 'marketExcelsior',\n                cost: 24,\n                getText: function (playerState) {\n                    return 'Sell \"Medicine\" at ' + this.cost + ' coins per unit. (Currently own ' + playerState.cargo.tradeMedicine + ' units.)';\n                },\n                isActionValid: function (playerState) {\n                    return playerState.cargo.tradeMedicine > 0;\n                },\n                performAction: function (playerState) {\n                    playerState.coins += this.cost;\n                    playerState.cargo.tradeMedicine -= 1;\n                }\n            },\n            {\n                next: 'marketExcelsior',\n                cost: 6,\n                getText: function (playerState) {\n                    return 'Buy \"Luxury Items\" at ' + this.cost + ' coins per unit. (Currently own ' + playerState.cargo.tradeLuxury + ' units.)';\n                },\n                isActionValid: function (p) {\n                    const hasEnoughMoney = () => p.coins >= this.cost;\n                    const hasEnoughCargoSpace = () => (0,_utils__WEBPACK_IMPORTED_MODULE_0__.calculateCargo)(p) < p.cargo.holdMax;\n                    return (hasEnoughMoney() && hasEnoughCargoSpace());\n                },\n                performAction: function (playerState) {\n                    playerState.coins -= this.cost;\n                    playerState.cargo.tradeLuxury += 1;\n                }\n            },\n            {\n                next: 'marketExcelsior',\n                cost: 6,\n                getText: function (playerState) {\n                    return 'Sell \"Luxury Items\" at ' + this.cost + ' coins per unit. (Currently own ' + playerState.cargo.tradeLuxury + ' units.)';\n                },\n                isActionValid: function (playerState) {\n                    return playerState.cargo.tradeLuxury > 0;\n                },\n                performAction: function (playerState) {\n                    playerState.coins += this.cost;\n                    playerState.cargo.tradeLuxury -= 1;\n                }\n            },\n            {\n                next: 'marketExcelsior',\n                cost: 10,\n                getText: function (playerState) {\n                    return 'Buy \"Food and Repair Supplies\" at ' + this.cost + ' coins per unit. (Currently own ' + playerState.cargo.shipSupplies + ' units.)';\n                },\n                isActionValid: function (p) {\n                    const hasEnoughMoney = () => p.coins >= this.cost;\n                    const hasEnoughCargoSpace = () => (0,_utils__WEBPACK_IMPORTED_MODULE_0__.calculateCargo)(p) < p.cargo.holdMax;\n                    return (hasEnoughMoney() && hasEnoughCargoSpace());\n                },\n                performAction: function (playerState) {\n                    playerState.coins -= this.cost;\n                    playerState.cargo.shipSupplies += 1;\n                }\n            },\n            {\n                next: 'marketExcelsior',\n                cost: 0,\n                getText: function (playerState) {\n                    return 'Dump \"Food and Repair Supplies\" to make more room in your cargo hold. (Currently own ' + playerState.cargo.shipSupplies + ' units.)';\n                },\n                isActionValid: function (playerState) {\n                    return playerState.cargo.shipSupplies > 0;\n                },\n                performAction: function (playerState) {\n                    playerState.coins += this.cost;\n                    playerState.cargo.shipSupplies -= 1;\n                }\n            },\n            {\n                next: 'maidenVoyage',\n                text: 'You finish stocking up and settle in for a long ride to Haliax Station in the Ganymede Prime system, your next port. You\\'re headed home to your family. It\\'s been almost a year since you last saw them.'\n            }\n        ]\n    },\n    { id: 'maidenVoyage',\n        title: 'Your Maiden Voyage',\n        getText: function (playerState) {\n            //this returns markup and text\n            const text1 = 'You head out from port, a captain on your maiden trip.';\n            const text2 = 'Bon voyage!';\n            return `<p>${text1}</p><p>${text2}</p>`;\n        },\n        choices: [\n            {\n                next: 'arriveHaliax',\n                getText: function (playerState) {\n                    //this returns markup and text\n                    const text1 = 'You arrive safely at Haliax Station.';\n                    return `<p>${text1}</p>`;\n                },\n                /*\n                isActionValid: function (playerState: types.PlayerState) {\n                    //this will return a boolean value\n                },\n                performAction: function (playerState: types.PlayerState) {\n                    //this changes playerState somehow\n                }\n                */\n            }\n        ]\n    },\n    { id: 'arriveHaliax',\n        title: 'Arriving in Haliax Station',\n        getText: function (playerState) {\n            //this returns markup and text\n            const text1 = 'This station orbits a largely agrarian planet. Food is cheap, but art and entertainment are hard to find on this lightly populated world and it\\'s bare-bones station.';\n            return `<p>${text1}</p>`;\n        },\n        choices: [\n            {\n                next: 'marketHaliax',\n                getText: function (playerState) {\n                    //this returns markup and text\n                    const text1 = 'Go make a killing by selling luxury goods! Or at least check the markets with an eye toward the future.';\n                    return `<p>${text1}</p>`;\n                },\n                /*\n                isActionValid: function (playerState: types.PlayerState) {\n                    //this will return a boolean value\n                },\n                performAction: function (playerState: types.PlayerState) {\n                    //this changes playerState somehow\n                }\n                */\n            },\n            {\n                next: 'nonexistentEvent',\n                getText: function (playerState) {\n                    //this returns markup and text\n                    const text1 = 'Click here to fall into a black hole.';\n                    return `<p>${text1}</p>`;\n                },\n                /*\n                isActionValid: function (playerState: types.PlayerState) {\n                    //this will return a boolean value\n                },\n                performAction: function (playerState: types.PlayerState) {\n                    //this changes playerState somehow\n                }\n                */\n            }\n        ]\n    },\n    { id: 'marketHaliax',\n        title: 'To market, to market...',\n        getText: function (playerState) {\n            var text1 = 'You scroll through the market listings, looking at what is best to buy and sell here.';\n            var text2 = 'The listings are kept in the \"Map\" section of your display.';\n            return `<p>${text1}</p><p>${text2}</p>`;\n        },\n        choices: [\n            {\n                cost: 5,\n                getText: function (playerState) {\n                    return 'Buy \"High Density Foodstuffs\" at ' + this.cost + ' coins per unit. (Currently own ' + playerState.cargo.tradeFood + ' units.)';\n                },\n                isActionValid: function (p) {\n                    const hasEnoughMoney = () => p.coins >= this.cost;\n                    const hasEnoughCargoSpace = () => (0,_utils__WEBPACK_IMPORTED_MODULE_0__.calculateCargo)(p) < p.cargo.holdMax;\n                    return (hasEnoughMoney() && hasEnoughCargoSpace());\n                },\n                performAction: function (playerState) {\n                    playerState.coins -= this.cost;\n                    playerState.cargo.tradeFood += 1;\n                }\n            },\n            {\n                cost: 5,\n                getText: function (playerState) {\n                    return 'Sell \"High Density Foodstuffs\" at ' + this.cost + ' coins per unit. (Currently own ' + playerState.cargo.tradeFood + ' units.)';\n                },\n                isActionValid: function (playerState) {\n                    return playerState.cargo.tradeFood > 0;\n                },\n                performAction: function (playerState) {\n                    playerState.coins += this.cost;\n                    playerState.cargo.tradeFood -= 1;\n                }\n            },\n            {\n                cost: 14,\n                getText: function (playerState) {\n                    return 'Buy \"Medicine\" at ' + this.cost + ' coins per unit. (Currently own ' + playerState.cargo.tradeMedicine + ' units.)';\n                },\n                isActionValid: function (p) {\n                    const hasEnoughMoney = () => p.coins >= this.cost;\n                    const hasEnoughCargoSpace = () => (0,_utils__WEBPACK_IMPORTED_MODULE_0__.calculateCargo)(p) < p.cargo.holdMax;\n                    return (hasEnoughMoney() && hasEnoughCargoSpace());\n                },\n                performAction: function (playerState) {\n                    playerState.coins -= this.cost;\n                    playerState.cargo.tradeMedicine += 1;\n                }\n            },\n            {\n                cost: 14,\n                getText: function (playerState) {\n                    return 'Sell \"Medicine\" at ' + this.cost + ' coins per unit. (Currently own ' + playerState.cargo.tradeMedicine + ' units.)';\n                },\n                isActionValid: function (playerState) {\n                    return playerState.cargo.tradeMedicine > 0;\n                },\n                performAction: function (playerState) {\n                    playerState.coins += this.cost;\n                    playerState.cargo.tradeMedicine -= 1;\n                }\n            },\n            {\n                cost: 22,\n                getText: function (playerState) {\n                    return 'Buy \"Luxury Items\" at ' + this.cost + ' coins per unit. (Currently own ' + playerState.cargo.tradeLuxury + ' units.)';\n                },\n                isActionValid: function (p) {\n                    const hasEnoughMoney = () => p.coins >= this.cost;\n                    const hasEnoughCargoSpace = () => (0,_utils__WEBPACK_IMPORTED_MODULE_0__.calculateCargo)(p) < p.cargo.holdMax;\n                    return (hasEnoughMoney() && hasEnoughCargoSpace());\n                },\n                performAction: function (playerState) {\n                    playerState.coins -= this.cost;\n                    playerState.cargo.tradeLuxury += 1;\n                }\n            },\n            {\n                cost: 22,\n                getText: function (playerState) {\n                    return 'Sell \"Luxury Items\" at ' + this.cost + ' coins per unit. (Currently own ' + playerState.cargo.tradeLuxury + ' units.)';\n                },\n                isActionValid: function (playerState) {\n                    return playerState.cargo.tradeLuxury > 0;\n                },\n                performAction: function (playerState) {\n                    playerState.coins += this.cost;\n                    playerState.cargo.tradeLuxury -= 1;\n                }\n            },\n            {\n                cost: 10,\n                getText: function (playerState) {\n                    return 'Buy \"Food and Repair Supplies\" at ' + this.cost + ' coins per unit. (Currently own ' + playerState.cargo.shipSupplies + ' units.)';\n                },\n                isActionValid: function (p) {\n                    const hasEnoughMoney = () => p.coins >= this.cost;\n                    const hasEnoughCargoSpace = () => (0,_utils__WEBPACK_IMPORTED_MODULE_0__.calculateCargo)(p) < p.cargo.holdMax;\n                    return (hasEnoughMoney() && hasEnoughCargoSpace());\n                },\n                performAction: function (playerState) {\n                    playerState.coins -= this.cost;\n                    playerState.cargo.shipSupplies += 1;\n                }\n            },\n            {\n                cost: 0,\n                getText: function (playerState) {\n                    return 'Dump \"Food and Repair Supplies\" to make more room in your cargo hold. (Currently own ' + playerState.cargo.shipSupplies + ' units.)';\n                },\n                isActionValid: function (playerState) {\n                    return playerState.cargo.shipSupplies > 0;\n                },\n                performAction: function (playerState) {\n                    playerState.coins += this.cost;\n                    playerState.cargo.shipSupplies -= 1;\n                }\n            },\n            {\n                next: 'arriveEuropa',\n                getText: function (playerState) {\n                    //this returns markup and text\n                    const text1 = 'You leave Haliax Station, heading to Europa Station in the Echidna Prime system.';\n                    return `<p>${text1}</p>`;\n                },\n                /*\n                isActionValid: function (playerState: types.PlayerState) {\n                    //this will return a boolean value\n                },\n                performAction: function (playerState: types.PlayerState) {\n                    //this changes playerState somehow\n                }\n                */\n            }\n        ]\n    },\n    { id: 'arriveEuropa',\n        title: 'Arriving in Europa Station',\n        getText: function (playerState) {\n            //this returns markup and text\n            const text1 = 'This station has no planet nearby, but it has made the most of it\\'s human resources. After a windfall investment in medical technology from a bank tycoon who fell in love with a stationer, the station became one of the best pharmaceutical producers on this trade route.';\n            return `<p>${text1}</p>`;\n        },\n        choices: [\n            {\n                next: 'marketEuropa',\n                getText: function (playerState) {\n                    //this returns markup and text\n                    const text1 = 'Go make a killing by selling medical goods! Or at least check the markets with an eye towards the future.';\n                    return `<p>${text1}</p>`;\n                },\n                /*\n                isActionValid: function (playerState: types.PlayerState) {\n                    //this will return a boolean value\n                },\n                performAction: function (playerState: types.PlayerState) {\n                    //this changes playerState somehow\n                }\n                */\n            }\n        ]\n    },\n    { id: 'marketEuropa',\n        title: 'To market, to market...',\n        getText: function (playerState) {\n            const text1 = 'You scroll through the market listings, looking at what is best to buy and sell here.';\n            const text2 = 'The listings are kept in the \"Map\" section of your display.';\n            return `<p>${text1}</p><p>${text2}</p>`;\n        },\n        choices: [\n            {\n                cost: 23,\n                getText: function (playerState) {\n                    return 'Buy \"High Density Foodstuffs\" at ' + this.cost + ' coins per unit. (Currently own ' + playerState.cargo.tradeFood + ' units.)';\n                },\n                isActionValid: function (p) {\n                    const hasEnoughMoney = () => p.coins >= this.cost;\n                    const hasEnoughCargoSpace = () => (0,_utils__WEBPACK_IMPORTED_MODULE_0__.calculateCargo)(p) < p.cargo.holdMax;\n                    return (hasEnoughMoney() && hasEnoughCargoSpace());\n                },\n                performAction: function (playerState) {\n                    playerState.coins -= this.cost;\n                    playerState.cargo.tradeFood += 1;\n                }\n            },\n            {\n                cost: 23,\n                getText: function (playerState) {\n                    return 'Sell \"High Density Foodstuffs\" at ' + this.cost + ' coins per unit. (Currently own ' + playerState.cargo.tradeFood + ' units.)';\n                },\n                isActionValid: function (playerState) {\n                    return playerState.cargo.tradeFood > 0;\n                },\n                performAction: function (playerState) {\n                    playerState.coins += this.cost;\n                    playerState.cargo.tradeFood -= 1;\n                }\n            },\n            {\n                cost: 9,\n                getText: function (playerState) {\n                    return 'Buy \"Medicine\" at ' + this.cost + ' coins per unit. (Currently own ' + playerState.cargo.tradeMedicine + ' units.)';\n                },\n                isActionValid: function (p) {\n                    const hasEnoughMoney = () => p.coins >= this.cost;\n                    const hasEnoughCargoSpace = () => (0,_utils__WEBPACK_IMPORTED_MODULE_0__.calculateCargo)(p) < p.cargo.holdMax;\n                    return (hasEnoughMoney() && hasEnoughCargoSpace());\n                },\n                performAction: function (playerState) {\n                    playerState.coins -= this.cost;\n                    playerState.cargo.tradeMedicine += 1;\n                }\n            },\n            {\n                cost: 9,\n                getText: function (playerState) {\n                    return 'Sell \"Medicine\" at ' + this.cost + ' coins per unit. (Currently own ' + playerState.cargo.tradeMedicine + ' units.)';\n                },\n                isActionValid: function (playerState) {\n                    return playerState.cargo.tradeMedicine > 0;\n                },\n                performAction: function (playerState) {\n                    playerState.coins += this.cost;\n                    playerState.cargo.tradeMedicine -= 1;\n                }\n            },\n            {\n                cost: 21,\n                getText: function (playerState) {\n                    return 'Buy \"Luxury Items\" at ' + this.cost + ' coins per unit. (Currently own ' + playerState.cargo.tradeLuxury + ' units.)';\n                },\n                isActionValid: function (p) {\n                    const hasEnoughMoney = () => p.coins >= this.cost;\n                    const hasEnoughCargoSpace = () => (0,_utils__WEBPACK_IMPORTED_MODULE_0__.calculateCargo)(p) < p.cargo.holdMax;\n                    return (hasEnoughMoney() && hasEnoughCargoSpace());\n                },\n                performAction: function (playerState) {\n                    playerState.coins -= this.cost;\n                    playerState.cargo.tradeLuxury += 1;\n                }\n            },\n            {\n                cost: 21,\n                getText: function (playerState) {\n                    return 'Sell \"Luxury Items\" at ' + this.cost + ' coins per unit. (Currently own ' + playerState.cargo.tradeLuxury + ' units.)';\n                },\n                isActionValid: function (playerState) {\n                    return playerState.cargo.tradeLuxury > 0;\n                },\n                performAction: function (playerState) {\n                    playerState.coins += this.cost;\n                    playerState.cargo.tradeLuxury -= 1;\n                }\n            },\n            {\n                cost: 10,\n                getText: function (playerState) {\n                    return 'Buy \"Food and Repair Supplies\" at ' + this.cost + ' coins per unit. (Currently own ' + playerState.cargo.shipSupplies + ' units.)';\n                },\n                isActionValid: function (p) {\n                    const hasEnoughMoney = () => p.coins >= this.cost;\n                    const hasEnoughCargoSpace = () => (0,_utils__WEBPACK_IMPORTED_MODULE_0__.calculateCargo)(p) < p.cargo.holdMax;\n                    return (hasEnoughMoney() && hasEnoughCargoSpace());\n                },\n                performAction: function (playerState) {\n                    playerState.coins -= this.cost;\n                    playerState.cargo.shipSupplies += 1;\n                }\n            },\n            {\n                cost: 0,\n                getText: function (playerState) {\n                    return 'Dump \"Food and Repair Supplies\" to make more room in your cargo hold. (Currently own ' + playerState.cargo.shipSupplies + ' units.)';\n                },\n                isActionValid: function (playerState) {\n                    return playerState.cargo.shipSupplies > 0;\n                },\n                performAction: function (playerState) {\n                    playerState.coins += this.cost;\n                    playerState.cargo.shipSupplies -= 1;\n                }\n            },\n        ]\n    },\n];\n\n\n//# sourceURL=webpack://spacemerchant-ts/./src/events.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ \"./src/utils.ts\");\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./events */ \"./src/events.ts\");\n/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./map */ \"./src/map.ts\");\n\n\n\nconst COL_BLUE = 'cornflowerblue';\nconst COL_RED = 'lightcoral';\n// const COL_ORANGE = 'sandybrown';\n// const COL_LTGRAY = 'silver';\nconst COL_DKGRAY = 'gray';\n/**\n *PLAYER STATE\n **/\nconst playerState = {\n    'coins': 100000,\n    'cargo': {\n        'holdMax': 10,\n        'shipSupplies': 0,\n        'tradeLuxury': 0,\n        'tradeMedicine': 0,\n        'tradeFood': 0\n    },\n    'ship': '',\n    'passengers': [],\n    'crew': [],\n    'costChoice': 0,\n    'updateUI': false,\n};\n/* end PLAYER STATE */\n/**\n *GLOBAL DOM ELEMENTS\n **/\nfunction getMainGameElem() {\n    if (!document) {\n        return;\n    }\n    const mainGameElem = document.querySelector('.mainGame');\n    if (!mainGameElem) {\n        throw new Error('Could not find mainGame element');\n    }\n    return mainGameElem;\n}\n// function getIframeWrapperElem() {\n//     if (!document) {\n//         return;\n//     }\n//     const iframeWrapperElem: HTMLDivElement = document.querySelector('.iframeWrapper')!;\n//     if (!iframeWrapperElem) {\n//         throw new Error('Could not find iframeWrapper element');\n//     }\n//     return iframeWrapperElem;\n// }\nfunction makeStatsTab(selected) {\n    // content for tab1\n    const explainText1 = 'Base stats like strength, speed, and intellect. Maybe some sort of points or game progress, as well.';\n    const strengthBarElem = makeMeasureBar('strength', 'strength', COL_RED, COL_DKGRAY);\n    const tabContent1Elem = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.tag)('div', `js-tabContent tabContent tabContent1 ${selected ? 'selected' : ''}`);\n    tabContent1Elem.appendChild((0,_utils__WEBPACK_IMPORTED_MODULE_0__.tag)('p', explainText1));\n    tabContent1Elem.appendChild(strengthBarElem);\n    return { tabContent1Elem, strengthBarElem };\n}\nfunction makeMapTab(selected) {\n    // content for tab 2\n    const accordionWrapperElem = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.tag)('div', 'accordionWrapper');\n    const tabContent2Elem = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.tag)('div', `js-tabContent tabContent tabContent2 ${selected ? 'selected' : ''}`);\n    for (let i = 0; i < _map__WEBPACK_IMPORTED_MODULE_2__.map.length; i++) {\n        displayAccordionLocation(_map__WEBPACK_IMPORTED_MODULE_2__.map[i], accordionWrapperElem);\n    }\n    tabContent2Elem.appendChild(accordionWrapperElem);\n    return { tabContent2Elem };\n}\nfunction makeItemTab(selected) {\n    // content for tab3\n    const explainText3 = 'Your items!';\n    const coinsElem = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.tag)('div', 'coins', 'Coins: ' + playerState.coins);\n    const cargoBarElem = makeMeasureBar('cargo', 'cargo', COL_BLUE, COL_DKGRAY);\n    const tabContent3Elem = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.tag)('div', `js-tabContent tabContent tabContent3 ${selected ? 'selected' : ''}`);\n    tabContent3Elem.appendChild((0,_utils__WEBPACK_IMPORTED_MODULE_0__.tag)('p', '', explainText3));\n    tabContent3Elem.appendChild(coinsElem);\n    tabContent3Elem.appendChild(cargoBarElem);\n    // build CREW INFO section\n    const crewWrapperElem = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.tag)('ul', 'crewWrapper');\n    const crewTitleElem = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.tag)('h3', 'crewTitle', 'Crew');\n    crewWrapperElem.appendChild(crewTitleElem);\n    const crewList = [];\n    if (playerState.crew.length < 1) {\n        crewWrapperElem.appendChild((0,_utils__WEBPACK_IMPORTED_MODULE_0__.tag)('li', 'crew', 'No crew hired on this ship!'));\n    }\n    else {\n        for (let i = 0; i < playerState.crew.length; i++) {\n            const crew = playerState.crew[i];\n            const crewElem = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.tag)('li', 'crew', `${crew.jobTitle} named ${crew.name} with a salary of ` +\n                `${crew.salary} and bonus of ${JSON.stringify(crew.bonus)}.`);\n            crewList.push(crew);\n            crewWrapperElem.appendChild(crewElem);\n        }\n    }\n    tabContent3Elem.appendChild(crewWrapperElem);\n    // end CREW INFO SECTION\n    return { coinsElem, cargoBarElem, tabContent3Elem, crewWrapperElem, crewTitleElem };\n}\nif (typeof window !== \"object\") {\n    console.log('this is not a browser, the DOM is not available');\n}\nelse {\n    const mainGameElem = getMainGameElem();\n    // const iframeWrapperElem = getIframeWrapperElem()!;\n    const statsBoxElem = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.tag)('div', 'js-statsBox js-tabbedArea center');\n    const controlBoxElem = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.tag)('div', 'js-controlBox left');\n    const storyBoxElem = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.tag)('div', 'js-storyBox right');\n    const scrollBoxElem = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.tag)('div', 'js-scrollbox');\n    mainGameElem.appendChild(statsBoxElem);\n    mainGameElem.appendChild(controlBoxElem);\n    mainGameElem.appendChild(storyBoxElem);\n    storyBoxElem.appendChild(scrollBoxElem);\n    controlBoxElem.appendChild((0,_utils__WEBPACK_IMPORTED_MODULE_0__.buildIcon)('play'));\n    controlBoxElem.appendChild((0,_utils__WEBPACK_IMPORTED_MODULE_0__.buildIcon)('save'));\n    controlBoxElem.appendChild((0,_utils__WEBPACK_IMPORTED_MODULE_0__.buildIcon)('settings'));\n    controlBoxElem.appendChild((0,_utils__WEBPACK_IMPORTED_MODULE_0__.buildIcon)('person'));\n    const tabsElem = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.tag)('ul', 'js-tabs');\n    statsBoxElem.appendChild(tabsElem);\n    // add three tab heads, 3rd starts selected\n    tabsElem.appendChild((0,_utils__WEBPACK_IMPORTED_MODULE_0__.tag)('li', 'js-tab tab tab1', 'Stats'));\n    tabsElem.appendChild((0,_utils__WEBPACK_IMPORTED_MODULE_0__.tag)('li', 'js-tab tab tab2', 'Map'));\n    tabsElem.appendChild((0,_utils__WEBPACK_IMPORTED_MODULE_0__.tag)('li', 'js-tab tab tab3', 'Items'));\n    // add three tab bodies, 3rd starts selected and visible\n    tabsElem.appendChild(makeStatsTab(false));\n    tabsElem.appendChild(makeMapTab(false));\n    tabsElem.appendChild(makeItemTab(true));\n    const tabsElemAsArray = Array.from(tabsElem.getElementsByClassName('js-tab'));\n    const tabsContentElemAsArray = Array.from(tabsElem.getElementsByClassName('js-tabContent'));\n    tabsElemAsArray.forEach((elem) => {\n        elem.addEventListener('click', (event) => {\n            var _a, _b, _c;\n            const clickedTab = event.target;\n            console.log({ clickedTab });\n            tabsElemAsArray.forEach(elem => elem.classList.remove('selected'));\n            tabsContentElemAsArray.forEach(elem => elem.classList.remove('selected'));\n            console.log({ unselected: clickedTab.classList });\n            clickedTab.classList.add('selected');\n            console.log({ selectedAgain: clickedTab.classList });\n            if (clickedTab.classList.contains('tab1')) {\n                (_a = tabsElem.getElementsByClassName('tabContent1')[0]) === null || _a === void 0 ? void 0 : _a.classList.add('selected');\n            }\n            if (clickedTab.classList.contains('tab2')) {\n                (_b = tabsElem.getElementsByClassName('tabContent2')[0]) === null || _b === void 0 ? void 0 : _b.classList.add('selected');\n            }\n            if (clickedTab.classList.contains('tab3')) {\n                (_c = tabsElem.getElementsByClassName('tabContent3')[0]) === null || _c === void 0 ? void 0 : _c.classList.add('selected');\n            }\n        });\n    });\n    //create scroll buttons that hover in the top right corner\n    const arrowWrapperElem = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.tag)('div', 'arrowWrapper');\n    const arrowUpElem = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.tag)('div', 'arrowUp');\n    const arrowDownElem = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.tag)('div', 'arrowDown');\n    arrowWrapperElem.appendChild(arrowUpElem);\n    arrowWrapperElem.appendChild(arrowDownElem);\n    mainGameElem.appendChild(arrowWrapperElem);\n    clickAndHold(() => scrollUpStory(storyBoxElem), arrowUpElem);\n    clickAndHold(() => scrollDownStory(storyBoxElem), arrowDownElem);\n    const jsDom = {\n        mainGameElem, statsBoxElem,\n        controlBoxElem, storyBoxElem,\n        scrollBoxElem, arrowWrapperElem,\n        arrowUpElem, arrowDownElem\n    };\n    //CALL THE FUNCTION displayEvent AND USE IT TO CREATE THE FIRST EVENT ON THE SCREEN\n    window.onload = () => {\n        let limit = 100;\n        const checkForCoinElem = () => setTimeout(() => {\n            const coinsElem = document.getElementsByClassName('coins')[0];\n            if (!coinsElem && limit > 0) {\n                limit--;\n                checkForCoinElem();\n            }\n            else if (!coinsElem) {\n                console.log('NO COINS ELEMENT ON PAGE, GAVE UP LOOKING');\n            }\n            else {\n                console.log('COIN ELEM FOUND!');\n                initGame(playerState, scrollBoxElem, _events__WEBPACK_IMPORTED_MODULE_1__.events.find(obj => obj.id === 'firstEvent'));\n            }\n        }, 50);\n        checkForCoinElem();\n    };\n}\nfunction initGame(playerState, scrollBoxElem, firstEvent) {\n    displayEvent(scrollBoxElem, firstEvent, playerState);\n    updateMeasureBar('cargo', (0,_utils__WEBPACK_IMPORTED_MODULE_0__.calculateCargo)(playerState), playerState.cargo.holdMax);\n}\n/* end DOM ELEMENTS */\n/**\n *TOGGLE EVENT GRAPH VISIBILITY\n **/\n// function showGraph() {\n//     if (!document) {\n//         return;\n//     }\n//     const mainGameElem = getMainGameElem()!;\n//     const iframeWrapperElem = getIframeWrapperElem()!;\n//     mainGameElem.style.display = 'none';\n//     iframeWrapperElem.style.visibility = 'visible';\n// }\n// function hideGraph() {\n//     if (!document) {\n//         return;\n//     }\n//     const mainGameElem = getMainGameElem()!;\n//     const iframeWrapperElem = getIframeWrapperElem()!;\n//     mainGameElem.style.display = 'block';\n//     iframeWrapperElem.style.visibility = 'hidden';\n// }\n/* end TOGGLE EVENT GRAPH VISIBILITY */\nfunction makeMeasureBar(className, label, primaryColor, secondaryColor) {\n    const barWrapper = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.tag)('div', 'barWrapper');\n    const barLabel = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.tag)('span', 'barLabel', label);\n    const bar = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.tag)('div', `bar ${className}-bar`);\n    bar.setAttribute('style', `width:auto;border-right: 0px solid ${secondaryColor};background-color:${primaryColor}`);\n    barWrapper.appendChild(barLabel);\n    barWrapper.appendChild(bar);\n    return barWrapper;\n}\nfunction updateMeasureBar(bar, currentValue, maxValue) {\n    if (!bar) {\n        return console.log('bar element not found');\n    }\n    const width = bar.clientWidth;\n    bar.style.borderRightWidth = Math.round((1 - (currentValue / maxValue)) * width) + 'px';\n    bar.innerText = currentValue + '/' + maxValue;\n}\n/**\n *STATS BOX CONTROLS\n **/\nfunction displayAccordionLocation(location, accordionWrapperElem) {\n    const itemWrapperElem = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.tag)('div', 'accordionItemWrapper');\n    const buttonElem = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.tag)('button', 'accordion', location.title);\n    buttonElem.addEventListener('click', (event) => {\n        var _a;\n        event.preventDefault();\n        const elem = event.target;\n        elem.classList.toggle(\"active\");\n        (_a = elem.nextElementSibling) === null || _a === void 0 ? void 0 : _a.classList.toggle(\"show\");\n    });\n    const itemListElem = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.tag)('ul', 'itemList');\n    const panelElem = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.tag)('div', 'panel');\n    panelElem.appendChild((0,_utils__WEBPACK_IMPORTED_MODULE_0__.tag)('p', '', location.description));\n    panelElem.append(itemListElem);\n    location.items.forEach((obj) => {\n        const item = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.tag)('li', 'item', obj.name + ': ' + obj.quantity);\n        itemListElem.append(item);\n    });\n    itemWrapperElem.appendChild(buttonElem);\n    itemWrapperElem.appendChild(panelElem);\n    accordionWrapperElem.append(itemWrapperElem);\n}\n/**\n *end STATS BOX CONTROLS\n **/\n/**\n *SCROLL BUTTONS\n **/\n//on click scrolling for the scroll buttons\nfunction scrollUpStory(storyBoxElem) {\n    storyBoxElem.scrollTop -= 3;\n}\nfunction scrollDownStory(storyBoxElem) {\n    storyBoxElem.scrollTop += 3;\n}\n//when mouse is clicked and held, keep taking an action until mouseup or mouseleave\nfunction clickAndHold(actionToTake, elementClicked) {\n    let timeoutId;\n    elementClicked.addEventListener('mousedown', () => {\n        timeoutId = setInterval(actionToTake, 10);\n    });\n    elementClicked.addEventListener('mouseup', () => {\n        clearTimeout(timeoutId);\n    });\n    elementClicked.addEventListener('mouseleave', () => {\n        clearTimeout(timeoutId);\n    });\n}\n/* end SCROLL BUTTONS */\n/**\n *STORY BOX CONTROLS\n **/\n//EVENT OBJECT STORED IN SEPARATE FILE\n//FUNCTION TO MAKE BUY CHOICE -- NEED TO MAKE THIS!!!\n//MAKE AN EVENT APPEAR ON THE SCREEN\nfunction displayEvent(scrollBoxElem, storyEvent, playerState) {\n    const coinsElem = document.getElementsByClassName('coins')[0];\n    scrollBoxElem.innerHTML = '';\n    const eventWrapperElem = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.tag)('div', 'storyContentWrapper');\n    eventWrapperElem.dataset.storyEvent = 'storyEvent', JSON.stringify(storyEvent);\n    scrollBoxElem.appendChild(eventWrapperElem);\n    const eventText = storyEvent.getText ?\n        storyEvent.getText(playerState) : storyEvent.text ?\n        storyEvent.text : '';\n    if (typeof eventText !== 'string') {\n        throw new Error(`eventText of ${storyEvent.id} is not a string`);\n    }\n    eventWrapperElem.appendChild((0,_utils__WEBPACK_IMPORTED_MODULE_0__.tag)('h3', 'eventTitle', storyEvent.title));\n    const eventTextWrapperElem = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.tag)('div', 'eventTextWrapper');\n    eventTextWrapperElem.innerHTML = eventText;\n    eventWrapperElem.appendChild(eventTextWrapperElem);\n    const choicesWrapperElem = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.tag)('div', 'choicesWrapper');\n    eventWrapperElem.appendChild(choicesWrapperElem);\n    for (let i = 0; i < storyEvent.choices.length; i++) {\n        const choice = storyEvent.choices[i];\n        const choiceElem = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.tag)('div', 'choice');\n        const text = choice.getText ?\n            choice.getText(playerState) : choice.text ?\n            choice.text : '';\n        if (typeof text === 'string') {\n            choiceElem.innerHTML = text;\n        }\n        choiceElem.dataset.nextEvent = choice.next;\n        choiceElem.dataset.choice = JSON.stringify(choice);\n        if (choice.isActionValid && choice.isActionValid(playerState) === false) {\n            choiceElem.classList.add('class', 'notValid');\n        }\n        if (choice.next && !_events__WEBPACK_IMPORTED_MODULE_1__.events.find(obj => obj.id === choice.next)) {\n            choiceElem.classList.add('class', 'notValid');\n        }\n        choiceElem.addEventListener(\"click\", (event) => {\n            if (choice.next && !_events__WEBPACK_IMPORTED_MODULE_1__.events.find(obj => obj.id === choice.next)) {\n                return;\n            }\n            if (choice.isActionValid && !choice.isActionValid(playerState)) {\n                return;\n            }\n            if (choice.hasOwnProperty('performAction') && choice.performAction !== undefined) {\n                choice.performAction(playerState);\n                if (playerState.updateUI) {\n                    const tabsElem = document.getElementsByClassName('js-tabs')[0];\n                    const tabsContent = Array.from(document.getElementsByClassName('js-tabContent'));\n                    const selectedTabIndex = tabsContent.findIndex(elem => elem.classList.contains('selected'));\n                    // get rid of the three content tabs, keep the title tabs\n                    tabsContent[2].remove();\n                    tabsContent[1].remove();\n                    tabsContent[0].remove();\n                    // create content tabs with the active tab correctly selected\n                    if (selectedTabIndex === 0) {\n                        tabsElem.appendChild(makeStatsTab(true));\n                        tabsElem.appendChild(makeMapTab(false));\n                        tabsElem.appendChild(makeItemTab(false));\n                    }\n                    if (selectedTabIndex === 1) {\n                        tabsElem.appendChild(makeStatsTab(false));\n                        tabsElem.appendChild(makeMapTab(true));\n                        tabsElem.appendChild(makeItemTab(false));\n                    }\n                    if (selectedTabIndex === 2) {\n                        tabsElem.appendChild(makeStatsTab(false));\n                        tabsElem.appendChild(makeMapTab(false));\n                        tabsElem.appendChild(makeItemTab(true));\n                    }\n                    // set updateUI to false after all updates finished\n                    playerState.updateUI = false;\n                }\n                updateMeasureBar('cargo', (0,_utils__WEBPACK_IMPORTED_MODULE_0__.calculateCargo)(playerState), playerState.cargo.holdMax);\n                coinsElem.innerText = playerState.coins.toString();\n            }\n            const nextEvent = _events__WEBPACK_IMPORTED_MODULE_1__.events.find(obj => obj.id === choice.next);\n            displayEvent(scrollBoxElem, nextEvent, playerState);\n        });\n        choicesWrapperElem.appendChild(choiceElem);\n    }\n}\n/**\n *end STORY BOX CONTROLS\n **/\n\n\n//# sourceURL=webpack://spacemerchant-ts/./src/index.ts?");

/***/ }),

/***/ "./src/map.ts":
/*!********************!*\
  !*** ./src/map.ts ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"map\": () => (/* binding */ map)\n/* harmony export */ });\nconst map = [\n    { id: 'excelsior',\n        'title': 'Beta Thymine, Excelsior Station',\n        'connects': ['haliax'],\n        'description': 'A tiny backwater, avoid here if possible. Hard to reach, exciting to leave.',\n        'items': [\n            { name: 'food', quantity: 15, },\n            { name: 'medicine', quantity: 24 },\n            { name: 'luxury', quantity: 6 },\n        ],\n    },\n    { id: 'haliax',\n        'title': 'Ganymede Prime, Haliax Station',\n        'connects': ['excelsior', 'europa'],\n        'description': 'A place, things happen here.',\n        'items': [\n            { name: 'food', quantity: 5, },\n            { name: 'medicine', quantity: 14 },\n            { name: 'luxury', quantity: 22 },\n        ],\n    },\n    { id: 'europa',\n        'title': 'Echidna 4317, Europa Station',\n        'connects': ['haliax', 'drone'],\n        'description': 'Beautiful, elegant, expensive.',\n        'items': [\n            { name: 'food', quantity: 23, },\n            { name: 'medicine', quantity: 9 },\n            { name: 'luxury', quantity: 21 },\n        ],\n    },\n    { id: 'drone',\n        'title': 'Eldrazi Minor, Drone Station',\n        'connects': ['europa'],\n        'description': 'Scary monsters dwell on this station\\'s neighboring planet.',\n        'items': [\n            { name: 'food', quantity: 11, },\n            { name: 'medicine', quantity: 7 },\n            { name: 'luxury', quantity: 10 },\n        ],\n    }\n];\n\n\n//# sourceURL=webpack://spacemerchant-ts/./src/map.ts?");

/***/ }),

/***/ "./src/utils.ts":
/*!**********************!*\
  !*** ./src/utils.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"buildIcon\": () => (/* binding */ buildIcon),\n/* harmony export */   \"calculateCargo\": () => (/* binding */ calculateCargo),\n/* harmony export */   \"tag\": () => (/* binding */ tag)\n/* harmony export */ });\n// function to help nest html built in my js\nfunction tag(tagType, classes, content) {\n    const elem = document.createElement(tagType);\n    elem.setAttribute('class', classes);\n    if (!content) {\n        return elem;\n    }\n    if (typeof content === 'string') {\n        elem.innerText = content;\n    }\n    if (typeof content !== 'string') {\n        elem.appendChild(content);\n    }\n    return elem;\n}\nfunction buildIcon(iconName) {\n    const iconWrapper = document.createElement('div');\n    iconWrapper.setAttribute('title', iconName);\n    iconWrapper.setAttribute('class', 'iconWrapper');\n    const svgWrapper = document.createElement('svg');\n    svgWrapper.setAttribute('viewbox', '0 0 100 100');\n    svgWrapper.setAttribute('class', 'icon');\n    const use = document.createElement('use');\n    use.setAttribute('class', iconName + '1 iconInner');\n    use.setAttribute('xlink:href', '#' + iconName);\n    use.setAttribute('x', '0');\n    use.setAttribute('y', '0');\n    svgWrapper.appendChild(use);\n    iconWrapper.appendChild(svgWrapper);\n    return iconWrapper;\n}\n//get a number of total items held in \"cargo\" to use for buying and carrying trade goods, etc.\nfunction calculateCargo(playerState) {\n    const c = playerState.cargo;\n    return (c.shipSupplies + c.tradeFood + c.tradeLuxury + c.tradeMedicine);\n}\n\n\n//# sourceURL=webpack://spacemerchant-ts/./src/utils.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;